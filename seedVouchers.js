import mongoose from "mongoose";
import Voucher from "./src/models/voucher.js"; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn Voucher model c·ªßa b·∫°n
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// D·ªØ li·ªáu m·∫´u voucher
const sampleVouchers = [
  // Voucher gi·∫£m theo ph·∫ßn trƒÉm
  {
    code: "NEWUSER20",
    description: "Gi·∫£m 20% cho kh√°ch h√†ng m·ªõi - T·ªëi ƒëa 100k",
    discountType: "PERCENTAGE",
    discountValue: 20,
    maxDiscountAmount: 100000,
    minOrderAmount: 200000,
    startDate: new Date("2024-01-01"),
    endDate: new Date("2024-12-31"),
    maxIssued: 1000,
    usesCount: 245,
    claimsCount: 245,
    maxUsesPerUser: 1,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher gi·∫£m gi√° c·ªë ƒë·ªãnh
  {
    code: "SAVE50K",
    description: "Gi·∫£m ngay 50.000ƒë cho ƒë∆°n h√†ng t·ª´ 500k",
    discountType: "FIXED_AMOUNT",
    discountValue: 50000,
    minOrderAmount: 500000,
    startDate: new Date("2024-03-01"),
    endDate: new Date("2024-03-31"),
    maxIssued: 500,
    usesCount: 123,
    claimsCount: 123,
    maxUsesPerUser: 2,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher mi·ªÖn ph√≠ ship
  {
    code: "FREESHIP",
    description: "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn to√†n qu·ªëc",
    discountType: "FREE_SHIP",
    discountValue: 30000,
    minOrderAmount: 200000,
    startDate: new Date("2024-02-01"),
    endDate: new Date("2024-04-30"),
    maxIssued: 2000,
    usesCount: 1567,
    claimsCount: 1567,
    maxUsesPerUser: 5,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher sale l·ªõn
  {
    code: "SALE40",
    description: "SALE S·ªêC - Gi·∫£m 40% t·ªëi ƒëa 300k",
    discountType: "PERCENTAGE",
    discountValue: 40,
    maxDiscountAmount: 300000,
    minOrderAmount: 1000000,
    startDate: new Date("2024-03-15"),
    endDate: new Date("2024-03-25"),
    maxIssued: 100,
    usesCount: 89,
    claimsCount: 89,
    maxUsesPerUser: 1,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher VIP
  {
    code: "VIP30",
    description: "∆Øu ƒë√£i VIP - Gi·∫£m 30% kh√¥ng gi·ªõi h·∫°n",
    discountType: "PERCENTAGE",
    discountValue: 30,
    minOrderAmount: 2000000,
    startDate: new Date("2024-01-01"),
    endDate: new Date("2024-12-31"),
    maxIssued: 50,
    usesCount: 12,
    claimsCount: 12,
    maxUsesPerUser: 3,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher cu·ªëi tu·∫ßn
  {
    code: "WEEKEND15",
    description: "Khuy·∫øn m√£i cu·ªëi tu·∫ßn - Gi·∫£m 15%",
    discountType: "PERCENTAGE",
    discountValue: 15,
    maxDiscountAmount: 150000,
    minOrderAmount: 300000,
    startDate: new Date("2024-03-01"),
    endDate: new Date("2024-06-30"),
    maxIssued: 300,
    usesCount: 78,
    claimsCount: 78,
    maxUsesPerUser: 2,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher sinh nh·∫≠t
  {
    code: "BIRTHDAY25",
    description: "Khuy·∫øn m√£i sinh nh·∫≠t - Gi·∫£m 25%",
    discountType: "PERCENTAGE",
    discountValue: 25,
    maxDiscountAmount: 200000,
    minOrderAmount: 500000,
    startDate: new Date("2024-01-01"),
    endDate: new Date("2024-12-31"),
    maxIssued: 200,
    usesCount: 45,
    claimsCount: 45,
    maxUsesPerUser: 1,
    usersUsed: [],
    isActive: true,
    rewardType: "BIRTHDAY",
  },

  // Voucher flash sale
  {
    code: "FLASH50",
    description: "Flash Sale - Gi·∫£m ngay 50k",
    discountType: "FIXED_AMOUNT",
    discountValue: 50000,
    minOrderAmount: 200000,
    startDate: new Date(),
    endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 ng√†y t·ª´ b√¢y gi·ªù
    maxIssued: 100,
    usesCount: 23,
    claimsCount: 23,
    maxUsesPerUser: 1,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },

  // Voucher ph·∫ßn th∆∞·ªüng ƒë√°nh gi√°
  {
    code: "REVIEW15",
    description: "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° - Gi·∫£m 15%",
    discountType: "PERCENTAGE",
    discountValue: 15,
    maxDiscountAmount: 200000,
    minOrderAmount: 200000,
    startDate: new Date("2024-01-01"),
    endDate: new Date("2025-12-31"), // C√≤n h·∫°n l√¢u
    maxIssued: 1000,
    usesCount: 0,
    claimsCount: 0,
    maxUsesPerUser: 1,
    usersUsed: [],
    isActive: true,
    rewardType: "REVIEW", // D√†nh cho reward ƒë√°nh gi√°
  },

  // Voucher ƒë√£ h·∫øt l∆∞·ª£t (ƒë·ªÉ test)
  {
    code: "SOLDOUT",
    description: "Voucher gi·∫£m 15% - ƒê√£ h·∫øt l∆∞·ª£t",
    discountType: "PERCENTAGE",
    discountValue: 15,
    maxDiscountAmount: 75000,
    minOrderAmount: 300000,
    startDate: new Date("2024-02-01"),
    endDate: new Date("2024-06-30"),
    maxIssued: 200,
    usesCount: 200,
    claimsCount: 200,
    maxUsesPerUser: 1,
    usersUsed: [],
    isActive: true,
    rewardType: "GENERAL",
  },
];

// H√†m k·∫øt n·ªëi database
const connectDB = async () => {
  try {
    const mongoURI = process.env.MONGO_URI;
    await mongoose.connect(mongoURI, {
      serverSelectionTimeoutMS: 5000,
      family: 4, // √©p IPv4, tr√°nh ::1
    });
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", error.message);
    process.exit(1);
  }
};

// H√†m seed d·ªØ li·ªáu
const seedVouchers = async () => {
  try {
    console.log("üå± B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu vouchers...");

    // X√≥a t·∫•t c·∫£ voucher c≈© (t√πy ch·ªçn)
    await Voucher.deleteMany({});
    console.log("üóëÔ∏è  ƒê√£ x√≥a t·∫•t c·∫£ vouchers c≈©");

    // Th√™m vouchers m·ªõi
    const result = await Voucher.insertMany(sampleVouchers);

    console.log(`‚úÖ ƒê√£ th√™m ${result.length} vouchers th√†nh c√¥ng:`);
    result.forEach((voucher) => {
      console.log(`   - ${voucher.code}: ${voucher.description}`);
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi seed vouchers:", error.message);

    // N·∫øu l·ªói tr√πng code, th·ª≠ update thay v√¨ insert
    if (error.code === 11000) {
      console.log("‚ö†Ô∏è  Ph√°t hi·ªán voucher tr√πng code, ƒëang th·ª≠ c·∫≠p nh·∫≠t...");
      await updateExistingVouchers();
    }
  }
};

// H√†m c·∫≠p nh·∫≠t voucher ƒë√£ t·ªìn t·∫°i
const updateExistingVouchers = async () => {
  try {
    for (const voucher of sampleVouchers) {
      await Voucher.findOneAndUpdate({ code: voucher.code }, voucher, {
        upsert: true,
        new: true,
      });
      console.log(`   ‚úÖ C·∫≠p nh·∫≠t/th√™m voucher: ${voucher.code}`);
    }
    console.log("‚úÖ Ho√†n th√†nh c·∫≠p nh·∫≠t vouchers!");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t vouchers:", error.message);
  }
};

// H√†m ch√≠nh
const main = async () => {
  await connectDB();
  await seedVouchers();

  console.log("üéâ Seed vouchers ho√†n th√†nh!");
  console.log("üìä T·ªïng quan:");

  const totalVouchers = await Voucher.countDocuments();
  const activeVouchers = await Voucher.countDocuments({ isActive: true });

  console.log(`   - T·ªïng s·ªë vouchers: ${totalVouchers}`);
  console.log(`   - Vouchers ƒëang ho·∫°t ƒë·ªông: ${activeVouchers}`);

  // ƒê√≥ng k·∫øt n·ªëi
  await mongoose.connection.close();
  console.log("üîê ƒê√£ ƒë√≥ng k·∫øt n·ªëi database");
  process.exit(0);
};

// Ch·∫°y script
main().catch((error) => {
  console.error("‚ùå L·ªói chung:", error);
  process.exit(1);
});

import { z } from 'zod';
import User from '../models/user.js';
import Otp from '../models/Otp.js';
import { sendMail } from '../config/mailer.js';
import { otpHtml } from '../utils/emailTemplates.js';
import generateOtp from '../utils/generateOtp.js';
import { hash, compare } from '../utils/hash.js';
import { signToken, signRefreshToken, verifyRefreshToken } from '../services/jwtServices.js';
import { asyncHandler } from '../utils/asyncHandler.js';

// ------------------- Zod Schemas -------------------

const EMAIL = z.string().email();
const PASSWORD = z.string().min(6);

const RegisterRequestSchema = z.object({ body: z.object({ email: EMAIL }) });
const RegisterVerifySchema = z.object({
  body: z.object({
    email: EMAIL,
    code: z.string().length(6),
    name: z.string().min(2),
    password: PASSWORD,
  }),
});

const ResetRequestSchema = z.object({ body: z.object({ email: EMAIL }) });
const ResetVerifySchema = z.object({
  body: z.object({ email: EMAIL, code: z.string().length(6), newPassword: PASSWORD }),
});

// ------------------- Helper Functions -------------------

function addMinutes(date, minutes) {
  return new Date(date.getTime() + minutes * 60000);
}

async function createAndSendOtp(email, type, title) {
  await Otp.deleteMany({ email, type });
  const code = generateOtp();
  const codeHash = await hash(code);
  const expiresAt = addMinutes(new Date(), 10);
  await Otp.create({ email, codeHash, type, expiresAt });
  await sendMail({ to: email, subject: `${title} ‚Äì M√£ OTP`, html: otpHtml({ title, code }) });
}

// L∆∞u refresh tokens (t·∫°m trong memory - c√≥ th·ªÉ l∆∞u DB/Redis)
let refreshTokens = [];

// ------------------- Controllers -------------------

// 1) ƒêƒÉng k√Ω: y√™u c·∫ßu OTP
export const registerRequestOtp = asyncHandler(async (req, res) => {
  const { email } = RegisterRequestSchema.parse(req).body;
  const exists = await User.findOne({ email });
  if (exists) {
    return res.status(409).json({ error: 'Email ƒë√£ t·ªìn t·∫°i' });
  }
  await createAndSendOtp(email, 'register', 'X√°c th·ª±c ƒëƒÉng k√Ω');
  return res.json({ message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
});

// 2) ƒêƒÉng k√Ω: x√°c minh OTP & t·∫°o t√†i kho·∫£n
export const registerVerify = asyncHandler(async (req, res) => {
  const { email, code, name, password } = RegisterVerifySchema.parse(req).body;
  const otp = await Otp.findOne({ email, type: 'register' });

  if (!otp) {
    return res.status(400).json({ error: 'OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ d√πng' });
  }
  if (otp.expiresAt < new Date()) {
    await Otp.deleteOne({ _id: otp._id });
    return res.status(400).json({ error: 'OTP ƒë√£ h·∫øt h·∫°n' });
  }
  if (!(await compare(code, otp.codeHash))) {
    otp.attempts += 1;
    await otp.save();
    return res.status(400).json({ error: 'M√£ OTP kh√¥ng ƒë√∫ng' });
  }

  // Mongoose middleware ƒë√£ hash password, kh√¥ng c·∫ßn hash l·∫°i
  const user = await User.create({ email, name, password });
  await Otp.deleteMany({ email, type: 'register' });

  return res.status(201).json({
    message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
    user: { id: user._id, email: user.email, name: user.name },
  });
});

// 3) Qu√™n m·∫≠t kh·∫©u: y√™u c·∫ßu OTP
export const resetRequestOtp = asyncHandler(async (req, res) => {
  const { email } = ResetRequestSchema.parse(req).body;
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });
  }
  await createAndSendOtp(email, 'reset', 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u');
  return res.json({ message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
});

// 4) Qu√™n m·∫≠t kh·∫©u: x√°c minh OTP & ƒë·ªïi m·∫≠t kh·∫©u
export const resetVerify = asyncHandler(async (req, res) => {
  const { email, code, newPassword } = ResetVerifySchema.parse(req).body;
  const otp = await Otp.findOne({ email, type: 'reset' });

  if (!otp) {
    return res.status(400).json({ error: 'OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ d√πng' });
  }
  if (otp.expiresAt < new Date()) {
    await Otp.deleteOne({ _id: otp._id });
    return res.status(400).json({ error: 'OTP ƒë√£ h·∫øt h·∫°n' });
  }
  if (!(await compare(code, otp.codeHash))) {
    otp.attempts += 1;
    await otp.save();
    return res.status(400).json({ error: 'M√£ OTP kh√¥ng ƒë√∫ng' });
  }

  const user = await User.findOne({ email });
  user.password = newPassword; // G√°n password m·ªõi
  await user.save(); // Mongoose middleware s·∫Ω hash password tr∆∞·ªõc khi l∆∞u

  await Otp.deleteMany({ email, type: 'reset' });
  return res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
});

// 5) ƒêƒÉng nh·∫≠p
export const login = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: 'Email & password required' });
  }

  const user = await User.findOne({ email });
  if (!user) return res.status(401).json({ message: 'Invalid credentials' });

  const ok = await user.comparePassword(password);
  if (!ok) return res.status(401).json({ message: 'Invalid credentials' });

  // T·∫°o access + refresh token
  const token = signToken({ id: user._id, email: user.email });
  const refresh = signRefreshToken({ id: user._id, email: user.email });
  refreshTokens.push(refresh);

  // Log token l√∫c login
  console.log('‚úÖ Access Token created at login:', new Date().toISOString());
  console.log('‚úÖ Access Token:', token);
  console.log('‚úÖ Refresh Token:', refresh);

  res.json({
    token,
    refreshToken: refresh,
    user: { id: user._id, email: user.email, name: user.name },
  });
});

// 6) L·∫•y th√¥ng tin user
export const me = asyncHandler(async (req, res) => {
  const user = await User.findById(req.user.id).select('-password');
  res.json({ user });
});

// 7) Refresh token
export const refreshTokenController = asyncHandler(async (req, res) => {
  const { refreshToken } = req.body;
  if (!refreshToken) return res.status(401).json({ message: 'Refresh token required' });

  try {
    const payload = verifyRefreshToken(refreshToken);
    const accessToken = signToken({ id: payload.id, email: payload.email });

    // Log token khi refresh t·ª´ client
    console.log('üîÑ New Access Token issued via refresh:', new Date().toISOString());
    console.log('üîÑ New Access Token:', accessToken);

    res.json({ token: accessToken });
  } catch (e) {
    return res.status(403).json({ message: 'Invalid or expired refresh token' });
  }
});

// 8) Logout
export const logout = asyncHandler(async (req, res) => {
  const { refreshToken } = req.body;
  if (!refreshToken) {
    return res.status(400).json({ message: 'Refresh token required' });
  }

  refreshTokens = refreshTokens.filter((t) => t !== refreshToken);
  res.json({ message: 'Logged out successfully' });
});

// ------------------- Auto Token m·ªói 15 ph√∫t -------------------

// H√†m t·∫°o access token t·ª´ refreshTokens trong memory
function autoGenerateToken() {
  if (refreshTokens.length === 0) return;

  refreshTokens.forEach((rt) => {
    try {
      const payload = verifyRefreshToken(rt); // ki·ªÉm tra refresh token c√≤n h·∫°n
      const accessToken = signToken({ id: payload.id, email: payload.email });
      console.log('üîÑ Auto Access Token (15 ph√∫t):', new Date().toISOString());
      console.log('üîÑ Access Token:', accessToken);
    } catch (err) {
      console.log('‚ùå Refresh token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá:', rt);
      // N·∫øu mu·ªën x√≥a refresh token h·∫øt h·∫°n kh·ªèi array:
      // refreshTokens = refreshTokens.filter(t => t !== rt);
    }
  });
}

// G·ªçi l·∫ßn ƒë·∫ßu
autoGenerateToken();

// L·∫∑p l·∫°i m·ªói 15 ph√∫t
setInterval(autoGenerateToken, 15 * 60 * 1000);